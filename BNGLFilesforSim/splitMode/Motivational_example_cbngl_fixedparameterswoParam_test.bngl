# Signal transduction with receptor internalization and transcriptional reg.  #
# cBNGL code: justin.s.hogg@gmail.com                                         #
# conception: Leonard A. Harris, Justin S. Hogg, James R. Faeder              #
# 6 June 2009                                                                 #
#                                                                             #
# Demonstrates features of cBNGL in a biologically relevant scenario.         #
# A motivating example for Winter Simulation Conference 2009 invited paper.   #

#Importing the parameters from a separate file 
#Note: Order of import matters since some genral parameters are dependent on spatial params
#Read Spatial params - these will be set per-cell instance
readFile({file=>"SpatialParamsIntermediate.bngl"})
#Read Initial concentrations - volume units: M, surface units: mol/um^2
#readFile({file=>"initConc.bngl"})
#Read General params - these should not change from simulation to simulation
readFile({file=>"NewParamTemplate.bngl"})
#print(breakme)

begin model

begin compartments
  EC  3  vol_EC-vol_CP 
  PM  2  sa_PM           EC
  CP  3  vol_CP-vol_NU-vol_EN                     PM
  NM  2  sa_NM           CP
  NU  3  vol_NU                     NM
  EM  2  sa_EM         CP
  EN  3  vol_EN                 EM
end compartments

begin molecule types
  L(r,d)               # Ligand w/ receptor binding and dimerization sites.
  R(l,tf~Y~pY)         # Receptor with ligand and TF binding sites.
  TF(r,d~Y~pY,dna,im)  # Transcription factor (monomer) with receptor, DNA, and importin binding sites; and dimerization domain.
  DNA(p1,p2)           # DNA molecule with two promoter sites. 
  mRNA1()              # mRNA transcript for Protein 1.
  mRNA2()              # mRNA transcript for Protein 2.
  P1(im,dna)           # Protein 1 with importin and DNA binding domains.
  P2()                 # Protein 2.
  Im(fg,cargo)         # nuclear importin molecule with hydrophobic domain (fg) that interacts with nuclear pore. 
  NP(fg)               # nuclear pore complex w/ hydrophobic FG repeat domain.
  Sink()               # a place for deleted molecules.
end molecule types

begin seed species
  L(r,d)@EC            L0
  R(l,tf~Y)@PM         R0
  TF(r,d~Y,dna,im)@CP  TF0
  DNA(p1,p2)@NU        DNA0
  Im(fg,cargo)@CP      Im0
  NP(fg)@NM            NP0
  
  # Arbitrarily assign compartment CP to the abstract molecule "Sink".  
  $Sink()@CP           0
end seed species

begin reaction rules
  # receptor-ligand binding.
  Rule1a:  L(r,d) + R(l)  <->  L(r!1,d).R(l!1)            kp_LR, km_LR
  Rule1b:  L(r,d!1).L(r,d!1) + R(l)  <->  L(r!2,d!1).L(r,d!1).R(l!2)            kp_LR, km_LR
  Rule1c:  L(r,d!1).L(r!3,d!1).R(l!3) + R(l)  <->  L(r!2,d!1).L(r!3,d!1).R(l!2).R(l!3)            kp_LR/0.01, km_LR

  # ligand dimerization.
  Rule2a:  L(r,d) + L(r,d)  <->  L(r,d!1).L(r,d!1)            kp_LL, km_LL  
  Rule2b:  L(r!+,d) + L(r,d)  <->  L(r!+,d!1).L(r,d!1)            kp_LL, km_LL  
  Rule2c:  L(r!+,d) + L(r!+,d)  <->  L(r!+,d!1).L(r!+,d!1)            kp_LL/0.01, km_LL  

  # Rule3: receptor-dimer internalization.
  Rule3:  @PM:R.R       ->  @EM:R.R                  k_R_endo

  # receptor, ligand recycling.
  Rule4:  @EM:R  ->  @PM:R                           k_recycle
  Rule5:  @EN:L  ->  @EC:L                           k_recycle

  # receptor transphosphorylation.
  Rule6:  R.R(tf~Y)  ->  R.R(tf~pY)                  k_R_transphos
  
  # receptor dephosphorylation.
  Rule7:  R(tf~pY)   ->  R(tf~Y)                     k_R_dephos
  
  # receptor-TF binding.  favor binding if TF(dim~Y), unbinding if TF(dim~pY).
  Rule8:  R(tf~pY) + TF(d~Y,r)   <->  R(tf~pY!1).TF(d~Y,r!1)     kp_R_TF,  km_R_TF
  Rule9:  R(tf~pY) + TF(d~pY,r)  <->  R(tf~pY!1).TF(d~pY,r!1)      kp_R_TFp, km_R_TFp

  # transcription factor trans-phosphorylation.
  Rule10:  TF.R.R.TF(d~Y)   ->  TF.R.R.TF(d~pY)      k_TF_transphos

  # transcription factor dephosphorylation (CP only).
  Rule11:  TF(d~pY)@CP      ->  TF(d~Y)@CP           k_TF_dephos
  
  # transcription factor dimerization.
  Rule12:  TF(r,d~pY,dna) + TF(r,d~pY,dna) <-> TF(r,d~pY!1,dna).TF(r,d~pY!1,dna)      kp_TF_TF, km_TF_TF

  # TF dimer binds promoter 1.
  Rule13:  TF(dna,im).TF(dna,im) + DNA(p1) <-> TF(dna!1,im).TF(dna!2,im).DNA(p1!1!2)  kp_TF_p1, km_TF_p1
  
  # transcription.
  Rule14:  DNA(p1!+) ->  DNA(p1!+) + mRNA1()@NU      k_transcribe
  Rule15:  DNA(p2!+) ->  DNA(p2!+) + mRNA2()@NU      k_transcribe
  
  # mRNA transport to cytoplams.
  Rule16:  mRNA1@NU  ->  mRNA1@CP                    k_mRNA_to_CP
  Rule17:  mRNA2@NU  ->  mRNA2@CP                    k_mRNA_to_CP
  
  # mRNA translation to protein.
  Rule18:  mRNA1@CP  ->  mRNA1@CP  +  P1(im,dna)@CP  k_translate
  Rule19:  mRNA2@CP  ->  mRNA2@CP  +  P2()@CP        k_translate
  
  # mRNA degradation.
  Rule20:  mRNA1     ->  Sink()@CP                  k_mRNA_deg  DeleteMolecules
  Rule21:  mRNA2     ->  Sink()@CP                  k_mRNA_deg  DeleteMolecules
  
  # protein degradation.
  Rule22:  P1        ->  Sink()@CP                  k_P_deg  DeleteMolecules
  Rule23:  P2        ->  Sink()@CP                  k_P_deg  DeleteMolecules
  
  # importin binds TF dimer (tends to pick up in CP, drop off in NU).
  Rule24:  TF(im,dna,r).TF(im,dna,r) + Im(cargo)@CP <-> TF(im!1,dna,r).TF(im!2,dna,r).Im(cargo!1!2)@CP  k_Im_bind_CP, k_Im_unbind_CP
  Rule25:  TF(im,dna,r).TF(im,dna,r) + Im(cargo)@NU <-> TF(im!1,dna,r).TF(im!2,dna,r).Im(cargo!1!2)@NU  k_Im_bind_NU, k_Im_unbind_NU

  # importin binds P1 (tends to pick up in CP, drop off in NU).
  Rule26:  P1(im,dna) + Im(cargo)@CP    <->  P1(im!1,dna).Im(cargo!1)@CP    k_Im_bind_CP, k_Im_unbind_CP
  Rule27:  P1(im,dna) + Im(cargo)@NU    <->  P1(im!1,dna).Im(cargo!1)@NU      k_Im_bind_NU, k_Im_unbind_NU
  
  # importin enters nuclear pore.
  Rule28:  Im(fg) + NP(fg)  <->  Im(fg!1).NP(fg!1)            k_Im_enters_NP, k_Im_exits_NP
  
  # importin traverses nuclear pore (with any cargo).
  Rule29:  Im(fg!1)@CP.NP(fg!1)  <->  Im(fg!1)@NU.NP(fg!1)    k_Im_cross_NP,  k_Im_cross_NP  MoveConnected

  # P1 binds promoter 2.
  Rule30:  P1(im,dna) + DNA(p2)  <->  P1(im,dna!1).DNA(p2!1)  kp_P1_p2, km_P1_p2  
end reaction rules  
       
begin observables
  
  Species    L_Dimers_EC   @EC:L.L
  Species    L_Dimers_PM   @PM:L.L
  Species    L_Dimers_EN   @EN:L.L
  Species    L_Dimers_EM   @EM:L.L
  
end observables
end model

# actions #
#generate_network({overwrite=>1,TextReaction=>0})
#simulate_ode({t_start=>20,t_end=>50,n_steps=>100})
readFile({file=>"SpatialActionsIntermediate.bngl"})
